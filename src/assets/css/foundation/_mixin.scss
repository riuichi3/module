@charset "utf-8";

@mixin clearfix {
  *zoom: 1;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  /*
---
name: clearfix
category: -mixin
---
```scss
  @include clearfix;
```
 */
}

$breakpoints: (
  "sp": "screen and (max-width: 767px)",
  "ta": "screen and (min-width: 768px) and (max-width: 1024px)",
  "pc": "screen and (min-width: 768px)",
) !default;

@mixin mq($breakpoint: pc) {
  @media #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

/*
---
name: media query
category: -mixin
---
SPファーストで作る想定のため何も指定しなければSPのcss
@include mq()でPC
@include mq(ta)でタブレット
@include mq(sp)でSP。これはスマホだけで適用したい時用
```scss
@include mq(sp) {
  @content;
}
@include mq(ta) {
  @content;
}
@include mq(pc) {
  @content;
}
```
 */

// font-sizeとline-heightを一括指定
@mixin font($fs, $lh, $pcfn, $pclh) {
  //spFontsize, spLineheight, pcFontsize, pcLineheight
  font-size: $fs / $spWidth * 100vw;
  line-height: $lh / $spWidth * 100vw;
  @include mq(pc) {
    font-size: $pcfn * 1px;
    line-height: $pclh * 1px;
  }
  @include mq(ta) {
    font-size: $pcfn / $mixinContentWidth * 100vw;
    line-height: $pclh / $mixinContentWidth * 100vw;
  }
}
/*
---
name: font-sizeとline-heightを一括指定
category: -mixin
---
引数は左からSP用[fontsize、lineheight]、PC用[fontsize、lineheight]
```scss
  @include font($fs, $lh, $pcfn, $pclh)
```
 */

// IE11用
@mixin ie11only {
  @media all and (-ms-high-contrast: none), print {
    @content;
  }
}

@mixin pcmaxwidth() {
  @include mq(pc) {
    max-width: $contentWidth;
    margin: auto;
  }
}

@function vw($n) {
  @return $n / $spWidth * 100vw;
}
/*
---
name: vwの数値取得
category: -mixin
---
width,height,margin,paddingなどの数値をspデザインの横幅から算出し、デバイスの画角に左右されない出力を提供する。SPのフォント以外は全部これを使う想定
```scss
  font-size:vw(16);
```
 */

@mixin size($data) {
  @media screen and (min-width: 768px) {
    @each $key, $val in $data {
      #{$key}: clamp(0px, ($val / $mixinContentWidth * 100vw), $val * 1px);
    }
  }
  @media all and (-ms-high-contrast: none) and (min-width: 768px), print {
    @each $key, $val in $data {
      #{$key}: $val * 1px;
    }
  }
}

/*
---
name: 数値取得(PC/タブレット用&IE11）
category: -mixin
---
pc/tabletのデザインを基本同じとしたとき、各種サイズの取得用。PC用のサイズを指定することで、tablet用の値も設定する<br>タブレット以上の画角を想定しており、@include mq(pc)などメディアクエリの記述を必要としない（勝手に入る）
```scss
  @include size(
    (
      'padding-top':10,
      'padding-right':11,
      'padding-bottom':12,
      'padding-left':13
    )
  );
```
 */

@function columnGap($n) {
  @return clamp(
    ($n / $mixinContentWidth * 100vw),
    ($n / $mixinContentWidth * 100vw),
    $n * 1px
  );
}
/*
---
name: 数値取得(PC/タブレット用）
category: -mixin
---
columnのGap指定用（マイナスの値をひれる必要がある場合用）
```scss
  margin-top: columnGap(-$gutterTopPC);
```
 */

@mixin lhCrop($line-height, $capital-letter: 1) {
  &::before {
    content: "";
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
  }
}
/*
---
name: テキスト要素の先頭行だけline-heightを取り除き、上ぴったりに揃える
category: -mixin
---
https://coliss.com/articles/build-websites/operation/css/simple-css-remove-top-space.html
```scss
  @include lhCrop($line-height)
```
 */

@mixin whBlockCenter() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
/*
---
name: boxの天地左右センター
category: -mixin
---
```scss
  @include whBlockCenter()
```
 */
